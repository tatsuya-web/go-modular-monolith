// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package post_handler

import (
	"context"
	"github.com/tatuya-web/go-modular-monolith/modules/post_module/post_model"
	"sync"
)

// Ensure, that AddPostServiceMock does implement AddPostService.
// If this is not the case, regenerate this file with moq.
var _ AddPostService = &AddPostServiceMock{}

// AddPostServiceMock is a mock implementation of AddPostService.
//
//	func TestSomethingThatUsesAddPostService(t *testing.T) {
//
//		// make and configure a mocked AddPostService
//		mockedAddPostService := &AddPostServiceMock{
//			AddPostFunc: func(ctx context.Context, title string, content string) (*post_model.Post, error) {
//				panic("mock out the AddPost method")
//			},
//		}
//
//		// use mockedAddPostService in code that requires AddPostService
//		// and then make assertions.
//
//	}
type AddPostServiceMock struct {
	// AddPostFunc mocks the AddPost method.
	AddPostFunc func(ctx context.Context, title string, content string) (*post_model.Post, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddPost holds details about calls to the AddPost method.
		AddPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Title is the title argument value.
			Title string
			// Content is the content argument value.
			Content string
		}
	}
	lockAddPost sync.RWMutex
}

// AddPost calls AddPostFunc.
func (mock *AddPostServiceMock) AddPost(ctx context.Context, title string, content string) (*post_model.Post, error) {
	if mock.AddPostFunc == nil {
		panic("AddPostServiceMock.AddPostFunc: method is nil but AddPostService.AddPost was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Title   string
		Content string
	}{
		Ctx:     ctx,
		Title:   title,
		Content: content,
	}
	mock.lockAddPost.Lock()
	mock.calls.AddPost = append(mock.calls.AddPost, callInfo)
	mock.lockAddPost.Unlock()
	return mock.AddPostFunc(ctx, title, content)
}

// AddPostCalls gets all the calls that were made to AddPost.
// Check the length with:
//
//	len(mockedAddPostService.AddPostCalls())
func (mock *AddPostServiceMock) AddPostCalls() []struct {
	Ctx     context.Context
	Title   string
	Content string
} {
	var calls []struct {
		Ctx     context.Context
		Title   string
		Content string
	}
	mock.lockAddPost.RLock()
	calls = mock.calls.AddPost
	mock.lockAddPost.RUnlock()
	return calls
}

// Ensure, that UpdatePostServiceMock does implement UpdatePostService.
// If this is not the case, regenerate this file with moq.
var _ UpdatePostService = &UpdatePostServiceMock{}

// UpdatePostServiceMock is a mock implementation of UpdatePostService.
//
//	func TestSomethingThatUsesUpdatePostService(t *testing.T) {
//
//		// make and configure a mocked UpdatePostService
//		mockedUpdatePostService := &UpdatePostServiceMock{
//			UpdatePostFunc: func(ctx context.Context, id post_model.PostID, title string, content string) (*post_model.Post, error) {
//				panic("mock out the UpdatePost method")
//			},
//		}
//
//		// use mockedUpdatePostService in code that requires UpdatePostService
//		// and then make assertions.
//
//	}
type UpdatePostServiceMock struct {
	// UpdatePostFunc mocks the UpdatePost method.
	UpdatePostFunc func(ctx context.Context, id post_model.PostID, title string, content string) (*post_model.Post, error)

	// calls tracks calls to the methods.
	calls struct {
		// UpdatePost holds details about calls to the UpdatePost method.
		UpdatePost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID post_model.PostID
			// Title is the title argument value.
			Title string
			// Content is the content argument value.
			Content string
		}
	}
	lockUpdatePost sync.RWMutex
}

// UpdatePost calls UpdatePostFunc.
func (mock *UpdatePostServiceMock) UpdatePost(ctx context.Context, id post_model.PostID, title string, content string) (*post_model.Post, error) {
	if mock.UpdatePostFunc == nil {
		panic("UpdatePostServiceMock.UpdatePostFunc: method is nil but UpdatePostService.UpdatePost was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ID      post_model.PostID
		Title   string
		Content string
	}{
		Ctx:     ctx,
		ID:      id,
		Title:   title,
		Content: content,
	}
	mock.lockUpdatePost.Lock()
	mock.calls.UpdatePost = append(mock.calls.UpdatePost, callInfo)
	mock.lockUpdatePost.Unlock()
	return mock.UpdatePostFunc(ctx, id, title, content)
}

// UpdatePostCalls gets all the calls that were made to UpdatePost.
// Check the length with:
//
//	len(mockedUpdatePostService.UpdatePostCalls())
func (mock *UpdatePostServiceMock) UpdatePostCalls() []struct {
	Ctx     context.Context
	ID      post_model.PostID
	Title   string
	Content string
} {
	var calls []struct {
		Ctx     context.Context
		ID      post_model.PostID
		Title   string
		Content string
	}
	mock.lockUpdatePost.RLock()
	calls = mock.calls.UpdatePost
	mock.lockUpdatePost.RUnlock()
	return calls
}

// Ensure, that DeletePostServiceMock does implement DeletePostService.
// If this is not the case, regenerate this file with moq.
var _ DeletePostService = &DeletePostServiceMock{}

// DeletePostServiceMock is a mock implementation of DeletePostService.
//
//	func TestSomethingThatUsesDeletePostService(t *testing.T) {
//
//		// make and configure a mocked DeletePostService
//		mockedDeletePostService := &DeletePostServiceMock{
//			DeletePostFunc: func(ctx context.Context, id post_model.PostID) error {
//				panic("mock out the DeletePost method")
//			},
//		}
//
//		// use mockedDeletePostService in code that requires DeletePostService
//		// and then make assertions.
//
//	}
type DeletePostServiceMock struct {
	// DeletePostFunc mocks the DeletePost method.
	DeletePostFunc func(ctx context.Context, id post_model.PostID) error

	// calls tracks calls to the methods.
	calls struct {
		// DeletePost holds details about calls to the DeletePost method.
		DeletePost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID post_model.PostID
		}
	}
	lockDeletePost sync.RWMutex
}

// DeletePost calls DeletePostFunc.
func (mock *DeletePostServiceMock) DeletePost(ctx context.Context, id post_model.PostID) error {
	if mock.DeletePostFunc == nil {
		panic("DeletePostServiceMock.DeletePostFunc: method is nil but DeletePostService.DeletePost was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  post_model.PostID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeletePost.Lock()
	mock.calls.DeletePost = append(mock.calls.DeletePost, callInfo)
	mock.lockDeletePost.Unlock()
	return mock.DeletePostFunc(ctx, id)
}

// DeletePostCalls gets all the calls that were made to DeletePost.
// Check the length with:
//
//	len(mockedDeletePostService.DeletePostCalls())
func (mock *DeletePostServiceMock) DeletePostCalls() []struct {
	Ctx context.Context
	ID  post_model.PostID
} {
	var calls []struct {
		Ctx context.Context
		ID  post_model.PostID
	}
	mock.lockDeletePost.RLock()
	calls = mock.calls.DeletePost
	mock.lockDeletePost.RUnlock()
	return calls
}

// Ensure, that ListPostServiceMock does implement ListPostService.
// If this is not the case, regenerate this file with moq.
var _ ListPostService = &ListPostServiceMock{}

// ListPostServiceMock is a mock implementation of ListPostService.
//
//	func TestSomethingThatUsesListPostService(t *testing.T) {
//
//		// make and configure a mocked ListPostService
//		mockedListPostService := &ListPostServiceMock{
//			ListPostsFunc: func(ctx context.Context) (post_model.Posts, error) {
//				panic("mock out the ListPosts method")
//			},
//		}
//
//		// use mockedListPostService in code that requires ListPostService
//		// and then make assertions.
//
//	}
type ListPostServiceMock struct {
	// ListPostsFunc mocks the ListPosts method.
	ListPostsFunc func(ctx context.Context) (post_model.Posts, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListPosts holds details about calls to the ListPosts method.
		ListPosts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockListPosts sync.RWMutex
}

// ListPosts calls ListPostsFunc.
func (mock *ListPostServiceMock) ListPosts(ctx context.Context) (post_model.Posts, error) {
	if mock.ListPostsFunc == nil {
		panic("ListPostServiceMock.ListPostsFunc: method is nil but ListPostService.ListPosts was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListPosts.Lock()
	mock.calls.ListPosts = append(mock.calls.ListPosts, callInfo)
	mock.lockListPosts.Unlock()
	return mock.ListPostsFunc(ctx)
}

// ListPostsCalls gets all the calls that were made to ListPosts.
// Check the length with:
//
//	len(mockedListPostService.ListPostsCalls())
func (mock *ListPostServiceMock) ListPostsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListPosts.RLock()
	calls = mock.calls.ListPosts
	mock.lockListPosts.RUnlock()
	return calls
}
