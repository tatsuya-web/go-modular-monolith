// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package user_handler

import (
	"context"
	"github.com/tatuya-web/go-modular-monolith/modules/user_module/user_model"
	"net/http"
	"sync"
)

// Ensure, that RegisterUserServiceMock does implement RegisterUserService.
// If this is not the case, regenerate this file with moq.
var _ RegisterUserService = &RegisterUserServiceMock{}

// RegisterUserServiceMock is a mock implementation of RegisterUserService.
//
//	func TestSomethingThatUsesRegisterUserService(t *testing.T) {
//
//		// make and configure a mocked RegisterUserService
//		mockedRegisterUserService := &RegisterUserServiceMock{
//			RegisterUserFunc: func(ctx context.Context, email string, password string, role string) (*user_model.User, error) {
//				panic("mock out the RegisterUser method")
//			},
//		}
//
//		// use mockedRegisterUserService in code that requires RegisterUserService
//		// and then make assertions.
//
//	}
type RegisterUserServiceMock struct {
	// RegisterUserFunc mocks the RegisterUser method.
	RegisterUserFunc func(ctx context.Context, email string, password string, role string) (*user_model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// RegisterUser holds details about calls to the RegisterUser method.
		RegisterUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
			// Password is the password argument value.
			Password string
			// Role is the role argument value.
			Role string
		}
	}
	lockRegisterUser sync.RWMutex
}

// RegisterUser calls RegisterUserFunc.
func (mock *RegisterUserServiceMock) RegisterUser(ctx context.Context, email string, password string, role string) (*user_model.User, error) {
	if mock.RegisterUserFunc == nil {
		panic("RegisterUserServiceMock.RegisterUserFunc: method is nil but RegisterUserService.RegisterUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Email    string
		Password string
		Role     string
	}{
		Ctx:      ctx,
		Email:    email,
		Password: password,
		Role:     role,
	}
	mock.lockRegisterUser.Lock()
	mock.calls.RegisterUser = append(mock.calls.RegisterUser, callInfo)
	mock.lockRegisterUser.Unlock()
	return mock.RegisterUserFunc(ctx, email, password, role)
}

// RegisterUserCalls gets all the calls that were made to RegisterUser.
// Check the length with:
//
//	len(mockedRegisterUserService.RegisterUserCalls())
func (mock *RegisterUserServiceMock) RegisterUserCalls() []struct {
	Ctx      context.Context
	Email    string
	Password string
	Role     string
} {
	var calls []struct {
		Ctx      context.Context
		Email    string
		Password string
		Role     string
	}
	mock.lockRegisterUser.RLock()
	calls = mock.calls.RegisterUser
	mock.lockRegisterUser.RUnlock()
	return calls
}

// Ensure, that SigninServiceMock does implement SigninService.
// If this is not the case, regenerate this file with moq.
var _ SigninService = &SigninServiceMock{}

// SigninServiceMock is a mock implementation of SigninService.
//
//	func TestSomethingThatUsesSigninService(t *testing.T) {
//
//		// make and configure a mocked SigninService
//		mockedSigninService := &SigninServiceMock{
//			SigninFunc: func(ctx context.Context, email string, pw string) (string, error) {
//				panic("mock out the Signin method")
//			},
//		}
//
//		// use mockedSigninService in code that requires SigninService
//		// and then make assertions.
//
//	}
type SigninServiceMock struct {
	// SigninFunc mocks the Signin method.
	SigninFunc func(ctx context.Context, email string, pw string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Signin holds details about calls to the Signin method.
		Signin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Email is the email argument value.
			Email string
			// Pw is the pw argument value.
			Pw string
		}
	}
	lockSignin sync.RWMutex
}

// Signin calls SigninFunc.
func (mock *SigninServiceMock) Signin(ctx context.Context, email string, pw string) (string, error) {
	if mock.SigninFunc == nil {
		panic("SigninServiceMock.SigninFunc: method is nil but SigninService.Signin was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Email string
		Pw    string
	}{
		Ctx:   ctx,
		Email: email,
		Pw:    pw,
	}
	mock.lockSignin.Lock()
	mock.calls.Signin = append(mock.calls.Signin, callInfo)
	mock.lockSignin.Unlock()
	return mock.SigninFunc(ctx, email, pw)
}

// SigninCalls gets all the calls that were made to Signin.
// Check the length with:
//
//	len(mockedSigninService.SigninCalls())
func (mock *SigninServiceMock) SigninCalls() []struct {
	Ctx   context.Context
	Email string
	Pw    string
} {
	var calls []struct {
		Ctx   context.Context
		Email string
		Pw    string
	}
	mock.lockSignin.RLock()
	calls = mock.calls.Signin
	mock.lockSignin.RUnlock()
	return calls
}

// Ensure, that SignoutServiceMock does implement SignoutService.
// If this is not the case, regenerate this file with moq.
var _ SignoutService = &SignoutServiceMock{}

// SignoutServiceMock is a mock implementation of SignoutService.
//
//	func TestSomethingThatUsesSignoutService(t *testing.T) {
//
//		// make and configure a mocked SignoutService
//		mockedSignoutService := &SignoutServiceMock{
//			SignoutFunc: func(ctx context.Context, r *http.Request) error {
//				panic("mock out the Signout method")
//			},
//		}
//
//		// use mockedSignoutService in code that requires SignoutService
//		// and then make assertions.
//
//	}
type SignoutServiceMock struct {
	// SignoutFunc mocks the Signout method.
	SignoutFunc func(ctx context.Context, r *http.Request) error

	// calls tracks calls to the methods.
	calls struct {
		// Signout holds details about calls to the Signout method.
		Signout []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *http.Request
		}
	}
	lockSignout sync.RWMutex
}

// Signout calls SignoutFunc.
func (mock *SignoutServiceMock) Signout(ctx context.Context, r *http.Request) error {
	if mock.SignoutFunc == nil {
		panic("SignoutServiceMock.SignoutFunc: method is nil but SignoutService.Signout was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *http.Request
	}{
		Ctx: ctx,
		R:   r,
	}
	mock.lockSignout.Lock()
	mock.calls.Signout = append(mock.calls.Signout, callInfo)
	mock.lockSignout.Unlock()
	return mock.SignoutFunc(ctx, r)
}

// SignoutCalls gets all the calls that were made to Signout.
// Check the length with:
//
//	len(mockedSignoutService.SignoutCalls())
func (mock *SignoutServiceMock) SignoutCalls() []struct {
	Ctx context.Context
	R   *http.Request
} {
	var calls []struct {
		Ctx context.Context
		R   *http.Request
	}
	mock.lockSignout.RLock()
	calls = mock.calls.Signout
	mock.lockSignout.RUnlock()
	return calls
}

// Ensure, that OwnUserServiceMock does implement OwnUserService.
// If this is not the case, regenerate this file with moq.
var _ OwnUserService = &OwnUserServiceMock{}

// OwnUserServiceMock is a mock implementation of OwnUserService.
//
//	func TestSomethingThatUsesOwnUserService(t *testing.T) {
//
//		// make and configure a mocked OwnUserService
//		mockedOwnUserService := &OwnUserServiceMock{
//			OwnUserFunc: func(ctx context.Context) (*user_model.User, error) {
//				panic("mock out the OwnUser method")
//			},
//		}
//
//		// use mockedOwnUserService in code that requires OwnUserService
//		// and then make assertions.
//
//	}
type OwnUserServiceMock struct {
	// OwnUserFunc mocks the OwnUser method.
	OwnUserFunc func(ctx context.Context) (*user_model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// OwnUser holds details about calls to the OwnUser method.
		OwnUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockOwnUser sync.RWMutex
}

// OwnUser calls OwnUserFunc.
func (mock *OwnUserServiceMock) OwnUser(ctx context.Context) (*user_model.User, error) {
	if mock.OwnUserFunc == nil {
		panic("OwnUserServiceMock.OwnUserFunc: method is nil but OwnUserService.OwnUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockOwnUser.Lock()
	mock.calls.OwnUser = append(mock.calls.OwnUser, callInfo)
	mock.lockOwnUser.Unlock()
	return mock.OwnUserFunc(ctx)
}

// OwnUserCalls gets all the calls that were made to OwnUser.
// Check the length with:
//
//	len(mockedOwnUserService.OwnUserCalls())
func (mock *OwnUserServiceMock) OwnUserCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockOwnUser.RLock()
	calls = mock.calls.OwnUser
	mock.lockOwnUser.RUnlock()
	return calls
}

// Ensure, that UpdateUserServiceMock does implement UpdateUserService.
// If this is not the case, regenerate this file with moq.
var _ UpdateUserService = &UpdateUserServiceMock{}

// UpdateUserServiceMock is a mock implementation of UpdateUserService.
//
//	func TestSomethingThatUsesUpdateUserService(t *testing.T) {
//
//		// make and configure a mocked UpdateUserService
//		mockedUpdateUserService := &UpdateUserServiceMock{
//			UpdateUserFunc: func(ctx context.Context, id user_model.UserID, email string) (*user_model.User, error) {
//				panic("mock out the UpdateUser method")
//			},
//		}
//
//		// use mockedUpdateUserService in code that requires UpdateUserService
//		// and then make assertions.
//
//	}
type UpdateUserServiceMock struct {
	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(ctx context.Context, id user_model.UserID, email string) (*user_model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID user_model.UserID
			// Email is the email argument value.
			Email string
		}
	}
	lockUpdateUser sync.RWMutex
}

// UpdateUser calls UpdateUserFunc.
func (mock *UpdateUserServiceMock) UpdateUser(ctx context.Context, id user_model.UserID, email string) (*user_model.User, error) {
	if mock.UpdateUserFunc == nil {
		panic("UpdateUserServiceMock.UpdateUserFunc: method is nil but UpdateUserService.UpdateUser was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    user_model.UserID
		Email string
	}{
		Ctx:   ctx,
		ID:    id,
		Email: email,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(ctx, id, email)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//
//	len(mockedUpdateUserService.UpdateUserCalls())
func (mock *UpdateUserServiceMock) UpdateUserCalls() []struct {
	Ctx   context.Context
	ID    user_model.UserID
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		ID    user_model.UserID
		Email string
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}

// Ensure, that DeleteUserServiceMock does implement DeleteUserService.
// If this is not the case, regenerate this file with moq.
var _ DeleteUserService = &DeleteUserServiceMock{}

// DeleteUserServiceMock is a mock implementation of DeleteUserService.
//
//	func TestSomethingThatUsesDeleteUserService(t *testing.T) {
//
//		// make and configure a mocked DeleteUserService
//		mockedDeleteUserService := &DeleteUserServiceMock{
//			DeleteUserFunc: func(ctx context.Context, r *http.Request, id user_model.UserID) error {
//				panic("mock out the DeleteUser method")
//			},
//		}
//
//		// use mockedDeleteUserService in code that requires DeleteUserService
//		// and then make assertions.
//
//	}
type DeleteUserServiceMock struct {
	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(ctx context.Context, r *http.Request, id user_model.UserID) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *http.Request
			// ID is the id argument value.
			ID user_model.UserID
		}
	}
	lockDeleteUser sync.RWMutex
}

// DeleteUser calls DeleteUserFunc.
func (mock *DeleteUserServiceMock) DeleteUser(ctx context.Context, r *http.Request, id user_model.UserID) error {
	if mock.DeleteUserFunc == nil {
		panic("DeleteUserServiceMock.DeleteUserFunc: method is nil but DeleteUserService.DeleteUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *http.Request
		ID  user_model.UserID
	}{
		Ctx: ctx,
		R:   r,
		ID:  id,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(ctx, r, id)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedDeleteUserService.DeleteUserCalls())
func (mock *DeleteUserServiceMock) DeleteUserCalls() []struct {
	Ctx context.Context
	R   *http.Request
	ID  user_model.UserID
} {
	var calls []struct {
		Ctx context.Context
		R   *http.Request
		ID  user_model.UserID
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}
